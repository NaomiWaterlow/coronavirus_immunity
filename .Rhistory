# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
Rcpp::sourceCpp('SEIR_lockdown_seasonal.cpp')
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 2
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
for(i in 1:n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,15),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
covid_deaths_daily
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 2
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
for(i in 1:n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,15),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
parameters
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
##### SETUP #######
run_start_2 <- as.Date("2020-01-01") # When to start the smulation
run_end <- as.Date("2020-06-01") # When to end teh simulation
length_to_run_2 <- (run_end - run_start_2)[[1]] #total days to run
mobility_date <- "2020-02-21" # date teh google mobility data starts
covid_date <- as.Date("2020-02-10") # date that covid is first introduced
covid_change_time <- as.Date("2020-03-23") #date of lockdown (i.e. schools closing)
serology_time <- as.Date("2020-05-31") # time point of seology. CHECK
#trace from which to take samples. Should already be formated appropiately.
load(here("fitting_seasonal/analysis", "trace_to_sample.Rdata"))
# change to correct names and reporting as log odds
colnames(trace_to_sample) <- c("ll","waning_day", "seasonal_R0", "seasonal_reported_1",
"seasonal_reported_2", "seasonal_reported_3",
"seasonal_reported_5", "seasonal_amplitude",
"phi", "step")
trace_to_sample$seasonal_reported_1 <- log(trace_to_sample$seasonal_reported_1/(1-trace_to_sample$seasonal_reported_1))
trace_to_sample$seasonal_reported_2 <- log(trace_to_sample$seasonal_reported_2/(1-trace_to_sample$seasonal_reported_2))
trace_to_sample$seasonal_reported_3 <- log(trace_to_sample$seasonal_reported_3/(1-trace_to_sample$seasonal_reported_3))
trace_to_sample$seasonal_reported_5 <- log(trace_to_sample$seasonal_reported_5/(1-trace_to_sample$seasonal_reported_5))
trace_to_sample <- data.frame(trace_to_sample)
trace_to_sample$seasonal_R0 <- trace_to_sample$seasonal_R0*0.939515
trace_to_sample$seasonal_amplitude <- trace_to_sample$seasonal_amplitude*0.939515
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 2
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
for(i in 1:n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,15),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
transmission <- data.table()
introductions <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
n_samples <- 2
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
for(i in 1:n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,15),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
parameters
outall <- as.data.table(ode(
y = unlist(init_state_2020),
t = times_20,
func = SEIR_2virus_cons_season, #SEIR_2virus_cons_ld
parms = parameters,
method = "rk4"))
for(i in 1:n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,15),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
outall <- as.data.table(ode(
y = unlist(init_state_2020),
t = times_20,
func = SEIR_2virus_cons_season, #SEIR_2virus_cons_ld
parms = parameters,
method = "rk4"))
outall
init_state_2020
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
for(i in 1:n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,15),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
n_samples <- 2
samples_to_take <- sample(x=1:dim(trace_to_sample)[1],size=n_samples,replace = T)
for(i in 1:n_samples){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- samples_to_take[i]
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = c(parameters_2020$beta_other,4), # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "L-BFGS-B",#"Brent", #
lower = c(0.01,0.1),
upper = c(0.6,15),
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(test_params  =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
transmission_temp <- data.table(transmission_val = transmission_fit$par[1])
transmission_temp$sample <- sample_num
transmission_temp$interaction <- interaction_param
transmission <- rbind(transmission,transmission_temp)
introductions_temp <- data.table(intro_val = transmission_fit$par[2])
introductions_temp$sample <- sample_num
introductions_temp$interaction <- interaction_param
introductions <- rbind(introductions,introductions_temp)
}
print(i)
}
init_state_2020
run_start_2
output_s
parameters
