# covid_gamma = 4, # 7 fixed
covid_R0 = 2.5,
seasonal_waning = 1*7*52,
seasonal_R0 = 1,
sigma = 0,
seasonal_reported_1 = -Inf,
seasonal_reported_2 = -Inf,
seasonal_reported_5 = -Inf,
# death_rate_1 = -Inf,
# death_rate_2 = -Inf,
# death_rate_3 = -Inf,
# death_rate_4 = -Inf,
# death_rate_5 = -Inf,
# covid_date = 1,
# covid_intro_adult = 0.5,
social_distancing = 0.2
)
upper <-  c(
# covid_gamma = 10, # 7 fixed
covid_R0 = 10,
seasonal_waning = 10*7*52,
seasonal_R0 = 10,
sigma = 1,
seasonal_reported_1 = Inf,
seasonal_reported_2 = Inf,
seasonal_reported_5 = Inf,
#  death_rate_1 = Inf,
#   death_rate_2 = Inf,
#   death_rate_3 = Inf,
#   death_rate_4 = Inf,
# death_rate_5 = Inf,
# covid_date = 60,
# covid_intro_adult = 5,
social_distancing = 0.8
)
run_model_get_logliks <- function(parameter_guesses){
#combine the parameters
parameters <- create_parameters(parameter_guesses)
# print(parameters)
# Run the model - seasonal corona only. For 20 years + a bit, to find low point (lp)
output_s <- run_model_seasonal(parameters)
colnames(output_s) <- names_states
# Get the incidence of reporting
reporting <- summary_stats_reported_seasonal(output_s, type = "SEIPRR")
# reporting_selection <- reporting[7280:7644, c("time", ..all_others)
# ][ , rowSums(.SD), by= time]
reporting_selection2 <- reporting[required_set, c("time", ..all_others)
][ , rowSums(.SD), by= time]
# reject based on Techumseh
likelihood_test <- reject_seasonal_Tech(output_s)
if(likelihood_test ==0){
#print("passed Techumseh")
# determine the start point of the season
min_reported <- required_set[which.min(reporting_selection2$V1)] # between year 20 and year 21
#  new initial conditions, starting from lowest point in the year
init_state_2019 <- calc_init_state_2019(output_s, min_reported)
# calculate the time-spot in the seasonal forcing to start from
time_stop <- (min_reported/364)
new_phi <- (time_stop - floor(time_stop))*364
parameters$phi <- -new_phi
parameters$covid_time <-  (as.Date(parameters$covid_date) -lp)[[1]]
parameters$mobility_start <-  (as.Date(mobility_date) -lp)[[1]]
# run the model for the 1019/2020 season
output_2020 <- run_model_2019(parameters, init_state_2019)
# calculate the Reffective for Covid
#   likelihood_test <- likelihood_test + reject_covid_Reff(parameters, output_2020)
if(likelihood_test == 0 ) {
#     print("passed Reffective")
# summaries
reportin_2020 <- summary_stats_reported_both(output_2020, type = "SEIPRR")
reportin_2020_daily <- summary_groups(reportin_2020)
# calculate model daily deaths by age
covid_deaths_weekly <- calculate_deaths(reportin_2020_daily[,c("time",..all_covs)],
parameters)
# calculate likelihood of the data: monthly seasonal age
lik_seasonal_ages <- calc_lik_seasonal_ages(reportin_2020_daily, parameters)
# calculate likelihood of the data: covid daily deaths
lik_covid_deaths <- calc_lik_covid_deaths(covid_deaths_weekly)
} }
if (likelihood_test == 0){
# combine likelihoods
likelihood_data <- lik_covid_deaths+ lik_seasonal_ages
} else {likelihood_data <-likelihood_test
lik_seasonal_ages <- NA ;lik_covid_deaths <- NA }
return(c(likelihood_data, lik_seasonal_ages,lik_covid_deaths, likelihood_test) )
}
get_log_posterior <- function(theta){
ll <- run_model_get_logliks(parameter_guesses = theta)
# prior <- get_llprior(parameter_guesses = theta)
log_posterior <- ll #+ prior
return(log_posterior)
}
0.99^500
0.99^5
exp(0.95099)
exp(0.00657)
exp(0.1^500)
exp(0.1^5)
install.packages("hmclearn")
library(hmclearn)
hmc()
thing <- 1:5
thing
lapply(thing, print())
lapply(thing, print
lapply(thing, print
)
sapply(thing, print)
return(l)
this_function <- function(d){
l <- d^2 * 3
return(l)
}
sapply(thing, this_function
)
library(parallel)
cl <- makeCluster(2)
parSapply(cl, thing, this_function)
detect_cores()
library(doParallel)
detect_cores()
parallel::detectCores()
cl <- parallel::makeCluster(2)
cl <- parallel::makeCluster(2, setup_timeout = 0.5)
parSapply(cl, thing, this_function)
19+95
19.95+35.7
51.05+55.65+19.95
126.65/4
load("aws_out/AWS_bb_var6_10k")
trace_out <- temp_store
# plot the traces
# trace_out[[2]] is the proposed values (i.e. accepted or rejected)
trace_dt <- data.table(trace_out[[1]])
source('~/Documents/GitHub/Covid_simulations/BM_funcs.R', echo=TRUE)
load("aws_out/AWS_bb_var6_10k")
80/3
27*3
85
84/3
27/3
28*2
56/3
55/3
3*3*3*3
93/3
62/3
61/3
93/3
3*3
10*3
31*3
93/3
2*2*2
91-1
1*3
9+1
1*3
*2
+1
87/3
29*2
58/3
57/3
29*2
19*2
85/3
84/3
28*2
55/3
81/3
27*2
53/3
78/3
26*2
51/3
17*2
76/3
75/3
49/3
72/3
24*2
47/3
69/3
23*2
45/3
29/3
66/3
22*2
43/3
63/2
63/3
21*2+1
21*2-1
41/3
60/3
20*2
39/3
13-1
# load the relevant packages
library(data.table)
library(MASS)
library(deSolve)
library(rootSolve)
library(Rcpp)
library(tmvtnorm)
library(ggplot2)
library(gridExtra)
library(here)
library(parallel)
library(doParallel)
library(coda)
sessionInfo()
# load the relevant packages
library(data.table)
library(MASS)
library(deSolve)
library(rootSolve)
library(Rcpp)
library(tmvtnorm)
library(ggplot2)
library(gridExtra)
library(here)
library(parallel)
library(doParallel)
library(coda)
install.packages("RcppSims_0.1.0.tar.gz", type = "source")
library(RcppSims)
# load in the functions and parameters for fitting
source(here("fitting_seasonal/fit", "BM_PT_functions.R"))
source(here("fitting_seasonal/fit", "BM_PT.R"))
source(here("fitting_seasonal/fit", "BM_PT_parameters.R"))
source(here("simulating_covid", "covid_sims_data.R"))
source(here("simulating_covid", "covid_sims_functions.R"))
getwd()
setwd("~/Documents/GitHub/coronavirus_immunity/")
# load the relevant packages
library(data.table)
library(MASS)
library(deSolve)
library(rootSolve)
library(Rcpp)
library(tmvtnorm)
library(ggplot2)
library(gridExtra)
library(here)
library(parallel)
library(doParallel)
library(coda)
library(RcppSims)
# load in the functions and parameters for fitting
source(here("fitting_seasonal/fit", "BM_PT_functions.R"))
source(here("fitting_seasonal/fit", "BM_PT.R"))
source(here("fitting_seasonal/fit", "BM_PT_parameters.R"))
source(here("simulating_covid", "covid_sims_data.R"))
source(here("simulating_covid", "covid_sims_functions.R"))
file.edit(here("simulating_covid", "Covid_sims_main.R"))
for(i in 1:2){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- sample(x=1:dim(trace_to_sample)[1],size=1,replace = T)
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = parameters_2020$beta_other, # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "Brent",
lower = 0.01,
upper =  0.3631551,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(transmission_rate =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
}
print(i)
}
##### SETUP #######
run_start_2 <- as.Date("2020-01-01") # When to start the smulation
run_end <- as.Date("2020-06-01") # When to end teh simulation
length_to_run_2 <- (run_end - run_start_2)[[1]] #total days to run
mobility_date <- "2020-02-21" # date teh google mobility data starts
covid_date <- as.Date("2020-02-10") # date that covid is first introduced
covid_change_time <- as.Date("2020-03-23") #date of lockdown (i.e. schools closing)
serology_time <- as.Date("2020-05-31") # time point of seology. CHECK
#trace from which to take samples. Should already be formated appropiately.
load(here("fitting_seasonal/analysis", "trace_to_sample.Rdata"))
# change to correct names and reporting as log odds
colnames(trace_to_sample) <- c("ll","waning_day", "seasonal_R0", "seasonal_reported_1",
"seasonal_reported_2", "seasonal_reported_3",
"seasonal_reported_5", "seasonal_amplitude",
"phi", "step")
trace_to_sample$seasonal_reported_1 <- log(trace_to_sample$seasonal_reported_1/(1-trace_to_sample$seasonal_reported_1))
trace_to_sample$seasonal_reported_2 <- log(trace_to_sample$seasonal_reported_2/(1-trace_to_sample$seasonal_reported_2))
trace_to_sample$seasonal_reported_3 <- log(trace_to_sample$seasonal_reported_3/(1-trace_to_sample$seasonal_reported_3))
trace_to_sample$seasonal_reported_5 <- log(trace_to_sample$seasonal_reported_5/(1-trace_to_sample$seasonal_reported_5))
trace_to_sample <- data.frame(trace_to_sample)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
for(i in 1:2){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- sample(x=1:dim(trace_to_sample)[1],size=1,replace = T)
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = parameters_2020$beta_other, # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "Brent",
lower = 0.01,
upper =  0.3631551,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(transmission_rate =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
}
print(i)
}
sero
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
for(i in 1:2){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- sample(x=1:dim(trace_to_sample)[1],size=1,replace = T)
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = parameters_2020$beta_other, # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "Brent",
lower = 0.01,
upper =  0.3631551,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(transmission_rate =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
}
print(i)
}
SERO_PLOT <- ggplot(sero, aes(x= ages)) +
geom_pointrange(aes(y=data, ymin=lower, ymax=upper)) +
geom_point(aes(y=model, colour = interaction, group = sample), alpha=0.8) +
scale_color_gradient(low = "deepskyblue", high = "royalblue4") +
labs(y = "Proportion positive", x = "Age group", colour = "Strength of protection")+
theme_linedraw()
SERO_PLOT
warnings
warnings()
SERO_PLOT
SERO_PLOT <- ggplot(sero, aes(x= ages)) +
geom_pointrange(aes(y=data, ymin=lower, ymax=upper)) +
geom_point(aes(y=model, colour = interaction, group = sample), alpha=0.8) +
scale_color_gradient(low = "deepskyblue", high = "royalblue4") +
labs(y = "Proportion positive", x = "Age group", colour = "Strength of protection")+
theme_linedraw() +
lims(y = c(0,0.2))
SERO_PLOT
source('~/Documents/GitHub/coronavirus_immunity/simulating_covid/covid_sims_functions.R', echo=TRUE)
# storage
model_deaths <- data.table()
r_0s <- data.table()
r_effs <- data.table()
sero <- data.table()
sig_list <- c(0,0.2,0.4,0.6,0.8,1)
for(i in 1:2){
for(sig in sig_list){
# need to run a loop or an apply over the number of samples required.
# take sample of seasonal parameters
sample_num <- sample(x=1:dim(trace_to_sample)[1],size=1,replace = T)
seasonal_sample <- trace_to_sample[sample_num,]
# run the seaonal model in order to get init start for the covid model
seasonal_out <- run_seasonal_for_init(seasonal_sample, model_type = "SEIR")
parameters_2020 <- update_parameters(seasonal_out[["parameters_2019"]])
# loop here over different interaction parameters
interaction_param <- sig
transmission_fit <- optim(par = parameters_2020$beta_other, # use as the transmission parameter (convert to R0 after)
fn = optimise_ll_deaths,
method = "Brent",
lower = 0.01,
upper =  0.3631551,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# run maximum likelihood estimation
# run covid model
# ll_deaths
# run the model with the ML estimate parameters
output_list <- run_model_on_sample(transmission_rate =  transmission_fit$par,
parameters_2020 = parameters_2020,
sigma = interaction_param,
init_state_2020 = seasonal_out["init_state_2020"])
# store the death output with the output from other samples
temp_deaths <- output_list$model_deaths
temp_deaths$sample <- sample_num
temp_deaths$interaction <- interaction_param
model_deaths <- rbind(model_deaths, temp_deaths)
r_0s_temp <- data.table(r_0 = output_list$r_0)
r_0s_temp$sample <- sample_num
r_0s_temp$interaction <- interaction_param
r_0s <- rbind(r_0s,r_0s_temp)
r_effs_temp <- data.table(r_eff = output_list$r_eff)
r_effs_temp$sample <- sample_num
r_effs_temp$interaction <- interaction_param
r_effs <- rbind(r_effs,r_effs_temp)
sero_temp <- data.table(output_list$serology)
sero_temp$sample <- sample_num
sero_temp$interaction <- interaction_param
sero <- rbind(sero,sero_temp)
}
print(i)
}
SERO_PLOT <- ggplot(sero, aes(x= ages)) +
geom_pointrange(aes(y=data, ymin=lower, ymax=upper)) +
geom_point(aes(y=model, colour = interaction, group = sample), alpha=0.8) +
scale_color_gradient(low = "deepskyblue", high = "royalblue4") +
labs(y = "Proportion positive", x = "Age group", colour = "Strength of protection")+
theme_linedraw() +
lims(y = c(0,0.2))
SERO_PLOT
